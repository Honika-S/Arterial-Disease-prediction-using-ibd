# -*- coding: utf-8 -*-
"""arterial disease prediction using ibd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nfnbSklG_hae8-jTM20kSLx8Aey0OJIt
"""

import pandas as pd
import numpy as np

df=pd.read_csv("/content/arterial_disease_and_IBD_EHRs_from_France (1).csv")

df

df.head(6)

df.tail()

df[df.duplicated()]

df.isnull().sum()

df['event_type_0ACS_1stroke']
median_imputation=df['event_type_0ACS_1stroke'].fillna(df['event_type_0ACS_1stroke'].median())
df['event_type_0ACS_1stroke']=median_imputation
df['event_type_0ACS_1stroke']

df['event_type_0ACS_1stroke'].astype('int32')

df['event_type_0ACS_1stroke'].isnull().sum()

x=df.iloc[:,0:-1]
y=df.iloc[:,-1]
y.astype('int32')

"""SPLITTING DATA INTO TEST DATA AND TRAIN DATA"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=42,test_size=0.3)

x_train

"""DECISION TREE"""

from sklearn.tree import DecisionTreeClassifier
gini_in=DecisionTreeClassifier(criterion='entropy',random_state=0)
gini_in.fit(x_train,y_train)

y_pred_gini=gini_in.predict(x_test)
y_pred_gini

from sklearn.metrics import accuracy_score
print((accuracy_score(y_pred_gini,y_test))*100)

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(20, 10))  # Adjust the figure size as needed
plot_tree(gini_in, filled=True, feature_names=['smoker', 'arterial_hypertension', 'diabetes', 'dyslipidemia', 'CTC_1_0to20mgperday_2_over20mg', 'immunossupressants', 'TNFi', 'meanCRP_over_5_in1y', 'meanCRP_over_5_in3y', 'Clinical_activity', 'sex_0female_1male', 'arterial_event', 'event_type_0ACS_1stroke'])
plt.show()

"""RANDOM FOREST TREE"""

from sklearn.ensemble import RandomForestClassifier
classifier=RandomForestClassifier(n_estimators=10,criterion="entropy")
classifier.fit(x_train,y_train)

y_pred=classifier.predict(x_test)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)
cm

from sklearn.metrics import accuracy_score
print(accuracy_score(y_pred,y_test))

n_estimators = len(classifier.estimators_)

plt.figure(figsize=(20, 10 * n_estimators))
for index, tree in enumerate(classifier.estimators_):
    plt.subplot(n_estimators, 1, index + 1)
    plot_tree(tree, filled=True, feature_names=['smoker', 'arterial_hypertension', 'diabetes', 'dyslipidemia', 'CTC_1_0to20mgperday_2_over20mg', 'immunossupressants', 'TNFi', 'meanCRP_over_5_in1y', 'meanCRP_over_5_in3y', 'Clinical_activity', 'sex_0female_1male', 'arterial_event', 'event_type_0ACS_1stroke'])
plt.show()

"""XGBoost CLASSIFICATION"""

from xgboost import XGBClassifier
model=XGBClassifier()

model.fit(x_train,y_train)

y_pred1=model.predict(x_test)

prediction=[round(value) for value in y_pred1]

Accuracy1=accuracy_score(y_test,prediction)
Accuracy1